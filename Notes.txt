 *Name of a component starts with a capital letter 
 *Functional component returns some piece of jsx or react element or composition of react element or a componenet itself 
 * In jsx inside {} brackets we can write any piece of Js
 *When we use other function in some functional component its known as component composition(when we use componenet  inside componenet)or composing components
 *JSX can only have one parent
 *<> or <React.Fragments> both is same
 *We keep a representation of a dom and is known as virtual dom and we need virtual dom for reconciliation 
 *Reconciliation is an algorithm that is used to diff one tree from other tree and it determines what needs to be changed in ui and what not
 *We will not use index(of map) as key bcoz the order of items may change 
 *There are two ways to export :
    1] Default export :In this we can export only one component if 
    exporting by default then no need of using {} when importing and if exporting by name then we have to use {} while importing
    2] Named export 
*Named import is not object destructuring 
*If we want to import all the components being expoted then we can use import * as Obj form "reqrdfileLocation"
*When we export default then wile importing if we dont use the same name then its okay we can rename it 
*When we write input in jsx then that and the one in html are different ,in html one if we write in keyboard then it will be shown in the input box but in the jsx it wont be able to write the text in the box 
*React uses one way data binding 
*If we need to maintain a variable that changes itself then we need to maintain a variable that is a react kind of variable (react variable ) it is kind of like a state variable
*Every component in react maintains a state and we can put the varibles on to that state 
*Hook is just a function
*useState(write default value in the paramaters ) returns a array and first variable of the array is the variable name 
*We cannot modify our variable directly it can only be done using a function
and its call two way binding
*We use state variables so that the variables are in sync with the ui
*Whenever we change a state variable react will refresh the whole componenet and not just rerender the changed component 
*We have to rerender the whole component with updated state varibles values 
*Microservice artitecture means instead of having just only one project we wil have small small different projects .we will deploy only the project we require ,and not the whole application
*We will not call our api inside component because componenet gets rerender Whenever the state changes so 
* There are two ways to handle api calls :
    1] 
        loads=> api call => render page 

    2] (first render then useEffect)
        loads=> render the page (initial)=>call the api=>update the ui

    2 way is better 
*To implement 2 way react provides access to useEffect hook
*There are two times when the componenet changes they are:1)on change of state ,2)Props changes 
*Best super power of react is its reconciliation algorithm 
* useEffect(()=>{
callback function
},[dependency array])
*The callback function wil be called on Every rerender but if we dont want that then we give a empty dependency array so it calls the function only one time  and that also after the rendering of ui is finished 
*In the dependency array we pass the state variable and when that state variable chages at that time the callback function will be called 
*So we will have a empty dependency array and call the api there
*Conditional rendering :We have to render either shimmer ui or api ui or normal ui
*If we dont want to return a componenet then we can do a early return 
*Any js expression can run inside {} and not statement and to run the statement we enclose it inside the () with , separated
*If we dont have dependency array in useEffect then it means useEffect is not depended on anything,and its default behaviour is to be called after render so everytime our component renders useEffect will be called
*Never create a componenet inside componenet,because when parent componenet is render then the child componenet is creted that many times unnecessarily 
*Never write the useState inside an if else and also inside for loop
*useState is a hook that react gives us to create local state variables inside our functional component so never 
use useState outside our functional componenet
*We can create more than one useEffect
*Prefer to use cdn for images and not the localstorge because cdn is faster ,cache image ,100% uptime 
*createBrowserRouter() here inside the parameter we will have some configuration ,this is the place where we will define what will happen if we load /path or any other site ,its argument contains array of paths corresponding to components 
*RouterProvider  is a componenet and at the rendering time write root.render(<RouterProvider router={appRouter }/>)
*Along with RouterProvider we pass some configuration
*Anchor tag refreshes the whole page so instead of that to redirect to another page we have link and the syntax is similar to that of Anchor tag and instead of "href" use "to" 
*There are 2 types of routing :
    [1] Client Side Routing 
    [2] Server Side Routing :Here all our pages come from server 
*Outlet will be filled by children configuartion ,the content in outlet should change ,All the childrens will go into the outlet according to the route 
*Whenever we need to do Conditional routing or dynamic routing we will put a outlet there 
*We can read a dynamic url using useParams
*The most important part of a class based component is render method ,without it we cant creat class based componenet,this render method is responsible for returning some jsx into the dom
**[10]
*In class based componenet constructor is the place which is used for the initialization  and so the constructor is the best place for creatig the state
*In this.setState we pass the modified object 
*We never mutate state directly 
Neve do this.state.variable=newValue
*componenetDidMount() will be called after the render 
constructor=> componenet renders =>componenetDidMount
*When react is rendering things it does it in two phase :
    1]Render phase (constructor is called and render method is called)
    2]Commit Phase (Here actually react is modifying the dom) and componenetDidMount is done after we have updated the dom
*componenetDidMount will be called after first render 
*componenetDidUpdate will be called after every next render 
*In functional componenet to do work of componenetDidUnmount in the useEffect first parameter we return a function ,and it will be called when we are unmounting it so we can do the clean up work 
*"this" is shared between all the methods of the class